util.AddNetworkString("ejb_evententry")

function wyodr.GetEventFilter()
	local filter = {}
	for _,ply in pairs(player.GetAll()) do
		if ply:IsAdmin() then table.insert(filter, ply) end
	end
	return filter
end
function wyodr.SendEventEntry(type, datatbl)
	net.Start("ejb_evententry")
	net.WriteBit(false)
	local tbl = {t=type}
	table.Merge(tbl, datatbl)
	net.WriteTable(tbl)
	net.Send(wyodr.GetEventFilter())
end
function wyodr.SendEventTextEntry(...)
	net.Start("ejb_evententry")
	net.WriteBit(true)
	net.WriteTable({...})
	net.Send(wyodr.GetEventFilter())
end

local function WeaponFromDamage(dmg)
   local inf = dmg:GetInflictor()
   local wep = nil
   if IsValid(inf) then
      if inf:IsWeapon() or inf.Projectile then
         wep = inf
      elseif dmg:IsDamageType(DMG_DIRECT) or dmg:IsDamageType(DMG_CRUSH) then
         -- DMG_DIRECT is the player burning, no weapon involved
         -- DMG_CRUSH is physics or falling on someone
         wep = nil
      elseif inf:IsPlayer() then
         wep = inf:GetActiveWeapon()
      end
   end

   return wep
end

hook.Add("PlayerDeath", "EJBEV", function(victim, inflictor, attacker)
	if wyodr.GetRoundState() ~= ROUND_ACTIVE then return end
	wyodr.SendEventEntry("kill", {att=wyodr.PackEntString(attacker), vic=wyodr.PackPlyString(victim)})
end)

hook.Add("PlayerHurt", "EJBEV", function(target, attacker, healthRemaining, damageTaken)
	if wyodr.GetRoundState() ~= ROUND_ACTIVE then return end
	if damageTaken <= 0 then return end
	if not target:IsPlayer() then return end
	local wep = "-none-"
	if IsValid(attacker) and attacker:IsPlayer() and IsValid(attacker:GetActiveWeapon()) then wep = attacker:GetActiveWeapon():GetClass() end
	
	wyodr.SendEventEntry("dmg", {att=wyodr.PackEntString(attacker), vic=wyodr.PackPlyString(target), dmg=math.Round(damageTaken), wep=wep})
end)