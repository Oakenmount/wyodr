
local function MapToFunc(str)
    local spl = str:Split(".")
    local root, par = _G, _G
    while true do
        if #spl == 0 then break end
        local t = table.remove(spl, 1)
        if not root[t] then ErrorNoHalt(tostring(t), " not found in root table " .. tostring(root)) end
        par = root
        root = root[t]
    end
    return root, par
end

concommand.Add("ejb_runperf", function(ply)
    if ply:IsValid() then return MsgN("rcon pls") end
    
    local oldfuncs = {}
    
    oldfuncs["hook.Call"] = MapToFunc("hook.Call")
    
    local hooktimes = {}
    
    hook.Call = function(name, gm, ...)
        local oldfunc = oldfuncs["hook.Call"]
        
        local start = SysTime()
        local ret = {oldfunc(name, gm, ...)}
        local elapsed = SysTime() - start
        
        hooktimes[name] = hooktimes[name] or {}
        hooktimes[name].times = hooktimes[name].times or {}
        table.insert(hooktimes[name].times, elapsed)
        
        return unpack(ret)
    end
    
    timer.Simple(3, function()
        local _, par = MapToFunc("hook.Call")
        par["Call"] = oldfuncs["hook.Call"]
        
        MsgN("Hook perf check finished === (", table.Count(hooktimes))
        for hn, tbl in pairs(hooktimes) do
            local avg, min, max = 0, 0, 0
            
            for _,time in pairs(tbl.times) do
                avg = avg + time
                min = math.min(min, time)
                max = math.max(max, time)
            end
            
            if #tbl.times > 0 then avg = avg / #tbl.times end
            
            MsgN(hn, ": ", avg, "-", min, "-", max)    
        end
    end)
    

end)